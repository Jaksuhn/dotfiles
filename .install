import archinstall
import logging
import requests
import os

KEYMAP = "de"
LOCALE = "en_US"
ENCODING = "UTF-8"
TIMEZONE = "Europe/Berlin"
DEFAULT_USER = "phisch"

dependencies = ["nano", "wget", "git"]
dependencies_aur = [
    "figma-linux",
    "font-manager",
    "giph",
    "google-chrome-dev",
    "jetbrains-toolbox",
    "phocus-gtk-theme-git",
    "picom-git",
    "polybar",
    "rtl88xxau-aircrack-dkms-git",
    "ttf-material-design-icons-git",
    "visual-studio-code-bin",
]

# Select a harddrive and a disk password
archinstall.log("Minimal only supports:")
archinstall.log(" * Being installed to a single disk")

if archinstall.arguments.get("help", None):
    archinstall.log(" - Optional disk encryption via --!encryption-password=<password>")
    archinstall.log(" - Optional filesystem type via --filesystem=<fs type>")
    archinstall.log(" - Optional systemd network via --network")

archinstall.arguments["harddrive"] = archinstall.select_disk(archinstall.all_disks())
hostname = archinstall.generic_select(["tower", "laptop"], "Select hostname (default: tower):") or "tower"
root_password = archinstall.get_password("Root password (default: root):") or "root"
user = input(f"Username (default: {DEFAULT_USER}): ") or DEFAULT_USER
user_password = archinstall.get_password(f"Password (default: {user}):") or user


def install_on(mountpoint):
    # We kick off the installer by telling it where the
    with archinstall.Installer(mountpoint) as installation:
        # Strap in the base system, add a boot loader and configure
        # some other minor details as specified by this profile and user.
        if installation.minimal_installation():
            installation.set_hostname(hostname)
            installation.add_bootloader()

            # Optionally enable networking:
            if archinstall.arguments.get("network", None):
                installation.copy_iso_network_config(enable_services=True)

            installation.add_additional_packages(dependencies)
            installation.install_profile("minimal")

            installation.user_create(user, user_password)
            installation.user_set_pw("root", root_password)

    # Once this is done, we output some useful information to the user
    # And the installation is complete.
    archinstall.log("There are two new accounts in your installation after reboot:")
    archinstall.log(f" * root (password: {root_password})")
    archinstall.log(f" * {user} (password: {user_password})")


if archinstall.arguments["harddrive"]:
    archinstall.arguments["harddrive"].keep_partitions = False

    print(f" ! Formatting {archinstall.arguments['harddrive']} in ", end="")
    archinstall.do_countdown()

    # First, we configure the basic filesystem layout
    with archinstall.Filesystem(archinstall.arguments["harddrive"], archinstall.GPT) as fs:
        # We use the entire disk instead of setting up partitions on your own
        if archinstall.arguments["harddrive"].keep_partitions is False:
            fs.use_entire_disk(root_filesystem_type=archinstall.arguments.get("filesystem", "btrfs"))

        boot = fs.find_partition("/boot")
        root = fs.find_partition("/")

        boot.format("vfat")

        # We encrypt the root partition if we got a password to do so with,
        # Otherwise we just skip straight to formatting and installation
        if archinstall.arguments.get("!encryption-password", None):
            root.encrypted = True
            root.encrypt(password=archinstall.arguments.get("!encryption-password", None))

            with archinstall.luks2(
                root, "luksloop", archinstall.arguments.get("!encryption-password", None)
            ) as unlocked_root:
                unlocked_root.format(root.filesystem)
                unlocked_root.mount("/mnt")
        else:
            root.format(root.filesystem)
            root.mount("/mnt")

        boot.mount("/mnt/boot")

install_on("/mnt")
